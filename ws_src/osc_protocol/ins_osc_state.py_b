# -*- coding:utf-8 -*-
import os
import threading
import queue
from collections import OrderedDict
from util.ins_util import *
import config
from util.log_util import *
from util.time_util import *
from threading import Semaphore

# get_poll_info = poll.poll_func.get_poll_info
# BATTERY = poll.poll_func.BATTERY
# EXTERNAL_DEV = poll.poll_func.EXTERNAL_DEV

EXTERNAL_DEV = '_external_dev'
SD1 = 'sd1'
SD2 = 'sd2'
USB = 'usb'
BATTERY = '_battery'
ID_RES = '_idRes'
TL_INFO = '_tl_info'
# PIC_RES = '_picRes'
# REC_RES = '_recRes'
# NET = '_net'
INTERVAL = 10000
STORAGE_POS = 1
CAM_STATE = '_cam_state'
#used for pic and calibraion notifys

# def get_mount_info():
#     device_info = []
#     try:
#         with open('/proc/mounts', 'r') as f:
#             data = f.readline()
#             while data != '':
#                 info = data.split(' ')
#                 # Print('info {}'.format(info))
#                 if len(info) > STORAGE_POS and info[STORAGE_POS].startswith('/storage/') and info[STORAGE_POS] != '/storage/emulated':
#                     # Print(' found storage {}'.format(info[STORAGE_POS]))
#                     device_info.append(get_storage_info(info[STORAGE_POS]))
#                 data = f.readline()
#     except Exception as e:
#         Err('get_mount_info exception {}'.format(e))
#
#     if len(device_info) == 0:
#         device_info.append(get_storage_info(config.ADD_STORAGE))
#     # Print('device_info {}'.format(device_info))
#     return device_info

sem_vfs = Semaphore()

def get_vfs(name):
    # Print('get_vfs {}'.format(name))
    vfs = None
    sem_vfs.acquire()
    try:
        if os.path.exists(name) and os.path.isdir(name):
            vfs = os.statvfs(name)
        # Print('2get_vfs {} '.format(name))
    except OSError as e:
        Err('get_vfs OSError {} name {}'.format(e, name))
    except Exception as e:
        Err('get_vfs exception {}'.format(e, name))
    sem_vfs.release()
    # Print('3get_vfs {}'.format(name))
    return vfs

def get_storage_info(path,dev_type, dev_name,unit='M'):
    info = OrderedDict()
    division  = {
                'M':1024 *1024,
                'K':1024,
                'G':1024 *1024 * 1024,
                 }
    info['type'] = dev_type
    info['path'] = path
    info['name'] = dev_name
    vfs = get_vfs(path)
    if vfs is not None:
        info['free'] = vfs.f_bsize * vfs.f_bfree / division[unit]
        info['total'] = vfs.f_bsize * vfs.f_blocks / division[unit]
    else:
        info['free'] = 0
        info['total'] = 0
    if file_exist(join_str_list((path, "/.pro_suc"))):
        info['test'] = True
    else:
        info['test'] = False
    # Print('info {}'.format(info))
    return info;

def get_dev_info_detail(dev_list):
    # Info('type {} count {} dev_list {}'.format(type(dev_list),len(dev_list),dev_list))
    dev_info = []
    try:
        for dev in dev_list:
            # Info('dev is {}'.format(dev));
            info = get_storage_info(dev['path'],dev_type = dev['dev_type'],dev_name = dev['name'])
            dev_info.append(info)
    except Exception as e:
        Info('get_dev_info_detail exception {}'.format(str(e)))
    # Info('2type {} count {} dev_list {}'.format(type(dev_list), len(dev_list), dev_list))
    return dev_info

class osc_state:
    poll_info = OrderedDict({BATTERY: {},
                             # PIC_RES: {},
                             ID_RES:[],
                             # REC_RES: {},
                             EXTERNAL_DEV: {'entries':[]},
                             TL_INFO:{},
                             #NET: {},
                             CAM_STATE:config.STATE_IDLE})
    sem = Semaphore()
    # cam_state = config.STATE_IDLE
    url_list = {config.PREVIEW_URL:None,config.RECORD_URL:None,config.LIVE_URL:None}

    # preview_url = None
    # live_url = None
    # 0.00 - 1.00
    # @classmethod
    # def get_battery_level(cls):
    #     return 0.50

    @classmethod
    def get_usb_in(cls):
        return False

    @classmethod
    def get_sdcard_in(cls):
        return False

    @classmethod
    def get_api_level(cls):
        return 2

    # @classmethod
    # def get_state_vendor(cls,cur_state,info):
    #     _vendorSpecific = OrderedDict()
    #     # _vendorSpecific['_usb_in'] = cls.get_usb_in()
    #     # _vendorSpecific['_sd_in'] = cls.get_sdcard_in()
    #     # _vendorSpecific['_api_level'] = cls.get_api_level()
    #     # _vendorSpecific['_recorded_time'] = cls.get_recorded_time()
    #     # _vendorSpecific['_recordable_time'] = cls.get_recordable_time()
    #     # _vendorSpecific['_taked_pic_num'] = cls.get_taked_pic_num()
    #     # _vendorSpecific['_available_pic_num'] = cls.get_available_pic_num()
    #     # _vendorSpecific['_used_space'] = cls.get_used_space()
    #     # _vendorSpecific['_total_space'] = cls.get_total_space()
    #     # _vendorSpecific['_server_version'] = cls.get_server_app_version()
    #     _vendorSpecific['_cam_state'] = cur_state
    #     _vendorSpecific[EXTERNAL_DEV] = info[EXTERNAL_DEV]
    #     return _vendorSpecific

    # @classmethod
    # def get_storage_uri(cls):
    #     ip  =  get_ip_by_name(config.ETH_DEV)
    #     if ip is None:
    #         ip = get_ip_by_name('wlan0')
    #         if ip is None:
    #             ip = 'no ip'
    #     return 'http://' + ip + '/sdcard/'

    # @classmethod
    # def set_poll_info_internal(cls):
    #     device_info = []
    #     device_info.append(get_storage_info(config.ADD_STORAGE,dev_type = 'internal'))
    #     Info('device_info is {} type {}'.format(device_info,type(device_info)))
    #     cls.set_external_info(device_info)

    # vendor specifix: _usb_in -- usb inserted;_sd_in --sdcard inserted
    @classmethod
    def get_osc_state(cls):
        osc_state = OrderedDict()
        # osc_g = osc_protocol.ins_osc_globo.osc_globo
        # osc_state['fingerprint'] = osc_g.get_finger_print()
        # osc_state['storage_uri'] = cls.get_storage_uri()

        # state = cls.get_poll_info()
        #add cam state
        # state['_cam_state'] = cls.get_cam_state()
        osc_state['state'] = cls.get_poll_info()
        # print(' osc_state is ', osc_state)
        return dict_to_jsonstr(osc_state)

    @classmethod
    def set_external_info(cls,dev_info):
        # Info('dev_info {} typed dev_info {}'.format(dev_info,type(dev_info)))
        cls.aquire_sem()
        try:
            cls.poll_info[EXTERNAL_DEV]['entries'] = dev_info
        except Exception as e:
            Err('set_external_info exception {}'.format(e))
        # Info('set set_external_info info {} len dev_info {}'.format(cls.poll_info,len(dev_info)))
        cls.release_sem()

    @classmethod
    def set_save_path(cls,content):
        cls.aquire_sem()
        try:
            cls.poll_info[EXTERNAL_DEV]['save_path'] = content['path']
        except Exception as e:
            Err('set_save_path exception {}'.format(e))
        # Print('set_save_path info {}'.format(content))
        cls.release_sem()

    @classmethod
    def set_battery_info(cls,info):
        cls.aquire_sem()
        try:
            # Info('set battery info {}'.format(info))
            cls.poll_info[BATTERY] = info
        except Exception as e:
            Err('set_battery_info exception {}'.format(e))
        # Print('set set_battery_info info {}'.format(cls.poll_info))
        cls.release_sem()

    # @classmethod
    # def check_bat_protect(cls):
    #     ret= False
    #     cls.aquire_sem()
    #     try:
    #         if check_dic_key_exist(cls.poll_info[BATTERY],'battery_charge') and check_dic_key_exist(cls.poll_info[BATTERY],'battery_level'):
    #             Info(' check_bat_protect info {} {}'.format(cls.poll_info[BATTERY]['battery_charge'],cls.poll_info[BATTERY]['battery_level']))
    #             if cls.poll_info[BATTERY]['battery_charge'] == 0 and cls.poll_info[BATTERY]['battery_level'] <= 5:
    #                 ret = True
    #     except Exception as e:
    #         Err('check_bat_protect exception {}'.format(e))
    #     cls.release_sem()
    #         # Print('set set_battery_info info {}'.format(cls.poll_info))
    #     return ret

    # @classmethod
    # def set_net_info(cls,info):
    #     cls.aquire_sem()
    #     cls.poll_info[NET] = info
    #     Print('set set_net_info info {}'.format(cls.poll_info))
    #     cls.release_sem()

    # @classmethod
    # def handle_usb_action(cls,content):
    #     # Print('555 id cls.poll_info {}'.format(id(cls.poll_info)))
    #     # Print('org cls.poll_info {}'.format(cls.poll_info))
    #     Print('handle_usb_action {}'.format(content))
    #     action = content['action']
    #     org_count = cls.poll_info[EXTERNAL_DEV]['num']
    #     Print('org_count {}'.format(org_count))
    #     delay_ms(5000)
    #     iTimes = 0;
    #     if action == 'add':
    #         while iTimes < 5:
    #             dev_info = get_mount_info()
    #             if len(dev_info) > org_count:
    #                 Print('add poll external {}'.format(dev_info))
    #                 break
    #             delay_ms(1000)
    #             iTimes += 1
    #         else:
    #             Warn('add no usb device')
    #         cls.set_external_info(dev_info)
    #     elif action == 'remove':
    #         while iTimes < 5:
    #             dev_info = get_mount_info()
    #             if len(dev_info) < org_count:
    #                 Print('remove poll external {}'.format(dev_info))
    #                 break
    #             delay_ms(1000)
    #             iTimes += 1
    #         else:
    #             Warn('remove no usb device')
    #         cls.set_external_info(dev_info)
    #     else:
    #         Error('wrong action {}'.format(action))

    @classmethod
    def handle_dev_notify_action(cls,content):
        dev_list = []
        if content is not None:
            dev_list = content['dev_list']
            # Info('2rec dev_list info {}'.format(dev_list))
        #/sdcard no need
        #dev_list.append(OrderedDict({'path':config.ADD_STORAGE,'dev_type':'internal','name':'sdcard'}))
        # Info(' dev_list is {}'.format(dev_list))
        dev_info = get_dev_info_detail(dev_list)
        # Info('rec dev_info  {}'.format(dev_info))
        cls.set_external_info(dev_info)
        # Info('2rec dev_info  {}'.format(dev_info))

    @classmethod
    def set_dev_speed_test_suc(cls,path):
        cls.aquire_sem()
        try:
            for dev in cls.poll_info[EXTERNAL_DEV]['entries']:
                if dev['path'] ==  path:
                    dev['test'] = True
                    break;
            else:
                Info('not found speed test path {}'.format(path))
        except Exception as e:
            Err('set_dev_speed_test_suc exception {}'.format(e))
        cls.release_sem()

    @classmethod
    def handle_save_path_change(cls,content):
        cls.set_save_path(content)

    @classmethod
    def handle_battery(cls,content):
        cls.set_battery_info(content)

    @classmethod
    def aquire_sem(cls):
        cls.sem.acquire()

    @classmethod
    def release_sem(cls):
        cls.sem.release()

    @classmethod
    def check_storage_space(cls):
        new_dev_info = []
        # len = poll_info[EXTERNAL_DEV]['num']
        # Info('cls.poll_info[EXTERNAL_DEV][entries] is {} type {}'.format(cls.poll_info[EXTERNAL_DEV]['entries'],type(cls.poll_info[EXTERNAL_DEV]['entries'])))
        for dev_info in cls.poll_info[EXTERNAL_DEV]['entries']:
            new_dev_info.append(get_storage_info(dev_info['path'],dev_type = dev_info['type'],dev_name = dev_info['name']))
        # Info('new_dev_info is {}'.format(new_dev_info))
        cls.poll_info[EXTERNAL_DEV]['entries'] = new_dev_info

    @classmethod
    def get_poll_info(cls):
        # Info('get_poll_info start')
        cls.aquire_sem()
        try:
            # Print('1get pollinfo is {}'.format(cls.poll_info))
            st = cls.poll_info[CAM_STATE]
            if ((st & config.STATE_RECORD) == config.STATE_RECORD) or ((st & config.STATE_LIVE) == config.STATE_LIVE):
                cls.check_storage_space()
        except Exception as e:
            Err('get_poll_info exception {}'.format(e))
        info = cls.poll_info
        # Print('2get pollinfo is {}'.format(cls.poll_info))
        cls.release_sem()
        return info

    @classmethod
    def add_res_id(cls,id):
        cls.aquire_sem()
        try:
            # Info('add res is {}'.format(id))
            cls.poll_info[ID_RES].append(id)
            # Info('poll_info {}'.format(cls.poll_info))
        except Exception as e:
            Err('add_res_id exception {}'.format(e))
        cls.release_sem()

    @classmethod
    def set_tl_count(cls,count):
        cls.aquire_sem()
        try:
            # Info('add tl_info {}'.format(count))
            cls.poll_info[TL_INFO]['tl_count'] = count
            # Info('poll_info {}'.format(cls.poll_info))
        except Exception as e:
            Err('add_res_id exception {}'.format(e))
        cls.release_sem()

    @classmethod
    def clear_tl_count(cls):
        cls.aquire_sem()
        try:
            # Info('clear_tl_count tl_info')
            cls.poll_info[TL_INFO] = {}
        except Exception as e:
            Err('add_res_id exception {}'.format(e))
        cls.release_sem()

    @classmethod
    def rm_res_id(cls,id):
        cls.aquire_sem()
        try:
            Info('rm res is {}'.format(id))
            cls.poll_info[ID_RES].remove(id)
        except Exception as e:
            Err('rm_res_id exception {}'.format(e))
        cls.release_sem()

    # @classmethod
    # def set_pic_info(cls,content):
    #     cls.aquire_sem()
    #     try:
    #         Info('pic res is {}'.format(content))
    #         cls.poll_info[PIC_RES] = content
    #     except Exception as e:
    #         Err('set_external_info exception {}'.format(e))
    #     cls.release_sem()

    # @classmethod
    # def set_rec_info(cls,content):
    #     cls.aquire_sem()
    #     try:
    #         Info('rec res is {}'.format(content))
    #         cls.poll_info[REC_RES] = content
    #     except Exception as e:
    #         Err('set_external_info exception {}'.format(e))
    #     cls.release_sem()

    @classmethod
    def get_cam_state(cls):
        # Info('get cam state a')
        cls.aquire_sem()
        try:
            state = cls.poll_info[CAM_STATE]
        except Exception as e:
            Err('get_cam_state exception {}'.format(e))
            state = config.STATE_EXCEPTION
        cls.release_sem()
        # Info('get cam state b')
        return state

    @classmethod
    def set_cam_state(cls,state):
        # Info('set cam state {}'.format(state))
        cls.aquire_sem()
        try:
            cls.poll_info[CAM_STATE] = state
        except Exception as e:
            Err('set_cam_state exception {}'.format(e))
        cls.release_sem()
        # Info('2set cam state {}'.format(state))

    @classmethod
    def clear_url_list(cls):
        #Info('clear url list')
        cls.url_list = {config.PREVIEW_URL:None,config.RECORD_URL:None,config.LIVE_URL:None}

    @classmethod
    def get_url_list(cls):
        return cls.url_list

    @classmethod
    def get_preview_url(cls):
        # Info('getPreview url {}'.format(cls.url_list[config.PREVIEW_URL]))
        return cls.url_list[config.PREVIEW_URL]

    @classmethod
    def set_preview_url(cls,url):
        # Info('setPreview url {}'.format(url))
        cls.url_list[config.PREVIEW_URL] = url

    @classmethod
    def set_rec_url(cls,url):
        cls.url_list[config.RECORD_URL] = url

    @classmethod
    def get_rec_url(cls):
        return cls.url_list[config.RECORD_URL]

    @classmethod
    def set_live_url(cls, url):
        cls.url_list[config.LIVE_URL] = url

    @classmethod
    def get_live_url(cls):
        return cls.url_list[config.LIVE_URL]